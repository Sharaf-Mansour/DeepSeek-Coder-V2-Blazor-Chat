@page "/"
@using Microsoft.JSInterop
@using System.Text.RegularExpressions
@attribute [StreamRendering(true)]
<PageTitle>AiChat</PageTitle>
<EditForm Enhance Model="this" style="max-width:95%" class="fs-2 border border-light border-2 rounded-1 container-fluid mt-5 bg-dark">
    <div class="row my-5 mx-1">
        <InputTextArea type="text" id="message" placeholder="Give me a task..." class="form-control  text-white bg-dark fs-3" @bind-Value="Message" />
    </div>
    <div class="row">
        <div class="col-1"></div>
        <button @onclick="()=>DoAiStuff(ChatAgent.System)" type="submit" class="btn btn-success col-2  text-dark fs-5 fw-bolder mb-2 px-5 bt-lg">System Message</button>
        <div class="col-2"></div>
        <button @onclick="()=>DoAiStuff(ChatAgent.User)" type="submit" class="btn btn-info col-2   text-dark fs-5 fw-bolder mb-2 px-5 bt-lg">User Message</button>
        <div class="col-2"></div>
        <button @onclick="()=>DoAiStuff(ChatAgent.Assistant)" type="submit" class="btn btn-warning  col-2  text-dark fs-5 fw-bolder mb-2 px-5 bt-lg">Assistant Message</button>
        <div class="col-1"></div>
    </div>
    <div class="row">
        <div class="col-1"></div>
        <div class="col-10 p-0 pt-2">
            <InputSelect @bind-Value="AIModel.ModelID" class="form-select p-2  form-control text-white bg-dark fs-3">
                @foreach(var value in AIModel.ModelTypes)
                {
                    <option value="@value">@value</option>
                }
               </InputSelect>
        </div>
        <div class="col-1"></div>
    </div>
    <div class="row">
        <div class="col-3"></div>
        <div class="col-2 p-0 pt-2">
            <button @onclick="AIModel.ResetChatHistory" class="btn btn-danger col-12  text-dark fs-5 fw-bolder mb-2 px-5 bt-lg">Restart Chat</button>
        </div>
        <div class="col-2"></div>
        <div class="col-2 p-0 pt-2">
            <button @onclick="ClearChatHistory" class="btn btn-danger col-12  text-dark fs-5 fw-bolder mb-2 px-5 bt-lg">Clear Chat</button>
        </div>
    </div>
    <div class="row mt-5">
        <div class="col">
            <div style="white-space: pre-wrap;word-wrap: break-word;">
                @((MarkupString)(Response ?? "ASK ME ANYTHING!"))
            </div>
        </div>
    </div>
</EditForm>

@code
{
    private string? Message { get; set; }
    private string? Response { get; set; }
    int Num = 0;
    private void ClearChatHistory() => Response = null;
    
    public string ParseHtmlContent(string? input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return "";
        Num++;
        var pattern = @"```(.*?)\n(.*?)```";
        var regex = new Regex(pattern, RegexOptions.Singleline);
        var result = regex.Replace(input, match =>
        {
            var lang = match.Groups[1].Value.Trim();
            var code = match.Groups[2].Value.Trim();
            return $"<div>\r\n<button class=\"btn btn-info\" onclick=\"copyToClipboard('id{Num}')\">Copy</button>\r\n   <pre><code id='id{Num}' class=\"{lang}\">{System.Net.WebUtility.HtmlEncode(code)}</code></pre></div>";
        });
        return (result);
    }


    async Task UserAI(string Message)
    {
        var CodeAgent = AIModel.AiUserAgent(Message);
        var chatMessage = "";
        await foreach (var content in CodeAgent)
        {
            chatMessage += content?.Content;
            Response += content?.Content;
            await InvokeAsync(StateHasChanged);
            await _js.InvokeVoidAsync("scrollToEnd");

        }
        AIModel.ChatHistory.AddAssistantMessage(chatMessage);
        Response = ParseHtmlContent(Response);
    }

    async Task SystemAI(string Message)
    {
        var CodeAgent = AIModel.AiSystemAgent(Message);
        var chatMessage = "";
        await foreach (var content in CodeAgent)
        {
            chatMessage += content?.Content;
            Response += content?.Content;
            await InvokeAsync(StateHasChanged);
            await _js.InvokeVoidAsync("scrollToEnd");

        }
        AIModel.ChatHistory.AddAssistantMessage(chatMessage);
        Response = ParseHtmlContent(Response);
    }

    async Task AssistantAI(string Message)
    {
        var CodeAgent = AIModel.AiAssistantAgent(Message);
        var chatMessage = "";
        await foreach (var content in CodeAgent)
        {
            chatMessage += content?.Content;
            Response += content?.Content;
            await InvokeAsync(StateHasChanged);
            await _js.InvokeVoidAsync("scrollToEnd");

        }
        AIModel.ChatHistory.AddAssistantMessage(chatMessage);
        Response = ParseHtmlContent(Response);
    }
    private async Task DoAiStuff(ChatAgent Type)
    {
        if (string.IsNullOrWhiteSpace(Message))
        {
            Response = "Please ask me something!";
            return;
        }
        Response += "<hr/>";
        Response += $"Human: {Message}";
        Response += "<hr/>";
        Response += $"{AIModel.ModelID} Ai: ";
        var tempMessage = Message;
        Message = "";
        if (Type is ChatAgent.System)
            await SystemAI(tempMessage);
        else if (Type is ChatAgent.User)
            await UserAI(tempMessage);
        else if (Type is ChatAgent.Assistant)
            await AssistantAI(tempMessage);
        else return;
        await InvokeAsync(StateHasChanged);
        Response += "<hr/>";
        var timer = new System.Timers.Timer(200);
        timer.Elapsed += async (sender, e) =>
        {
            await _js.InvokeVoidAsync("highlightSnippet");
            await _js.InvokeVoidAsync("highlightSnippet");

            timer.Stop();
        };
        timer.Start();
    }
}